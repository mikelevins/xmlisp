;;;-*- Mode: Lisp; Package: LUI -*-;*********************************************************************;*                                                                   *;*    PROGRAM    E X T R A C T   F R O M   W E B   P A G E           *;*                                                                   *;*********************************************************************   ;* Author    : Alexander Repenning (alexnder@agentsheets.com)     *   ;*             http://www.agentsheets.com                         *   ;* Copyright : (c) 2012 AgentSheets Inc.                          *   ;* Filename  : extract-from-web-page.lisp                         *   ;* Based on  : WWW-commands.lisp (AgentSheets 1.6)                *   ;* Updated   : 02/11/12                                           *   ;* Version   :                                                    *   ;*   1.0   02/11/12                                               *   ;* HW/SW     : MacBook Pro, OS X 10.6.8, CCL 1.7                  *   ;* Abstract  : Extract information from web pages                 *   ;*                                                                *   ;******************************************************************(in-package :lui);********************************************;*  TCP/IP Reader and Parser                *;********************************************(defun PARSE-URL (URL) "  in:  URL {URL}.  out: Server File {string}.  Parse an URL into <server> and <file>.  e.g, ''http://www.cs.colorado.edu/homes/ralex/public_html/Home.html''  => server = www.cs.colorado.edu  => file   = /homes/ralex/public_html/Home.html."  (let ((Start (search "//" URL)))    (when Start      (let* ((String (subseq URL (+ Start 2)))             (File-index (search "/" String)))        (when File-Index          (values           (subseq String 0 File-index)           (subseq String File-index)))))))(defun FIND-MATCH-STRING (Stream String Length) "  in:  Stream {stream}, String {string}, length int;  out: Find {boolean}.  Find <String> in <Stream>.   String may contain ''*'' wildcards to skip tags etc."  (let ((Index 0)         (Sub-Index 0)        (Char nil))    (setq String (string-upcase String))    (dotimes (i Length)      (cond       ;; Wildcard       ((char= (char String Index) #\*)        (incf Index)        (setq Sub-Index Index)        (when (= Index (length String)) (return t)))       ;; else Read and match       (t        (setq Char (read-char Stream nil nil))        (unless Char (return-from FIND-MATCH-STRING nil))        (setq Char (char-upcase Char))        (cond         ;; Character Match         ((char= (char String Index) Char)          (incf Index)          (when (= Index (length String))            ;; done!            (return t)))         ;; Missmatch         (t (setq Index Sub-Index))))))))(defun FIND-STRING-IN-WEB-PAGE (URL String) "  in: URL {string}, String {string}  out: Value {t}.  Search web page  <URL> for <String>.  If string is not present return nil.    otherwise, if there is a <Reader> call it and return its value.               if there is no <Reader> return t.  <String> can contain ''*'' wildcards."  (ccl::http-get    Url   :reader-function   #'(lambda (Stream Code Length)       ;;(print Code)       (when (find-match-string Stream String Length)         (read-formated-number Stream)))))   (defun SKIP-HTML-TAGS (Stream) "  in: Stream {stream}.  Skip all ''<??>'' HTML tags in stream."  (let ((State :outside))    (loop      (let ((Char (read-char Stream nil nil)))        (unless Char (return))        (case State          (:outside            (case Char             (#\< (setq State :inside))             ((#\space #\newline #\linefeed #\>) ) ;; ignore             (t (return (unread-char Char Stream)))))          (:inside           (case Char             (#\> (setq State :outside))             (t ))))))))                        (defun READ-FORMATED-NUMBER (Stream) "  in:  Stream {stream}.  out: Number {fixnum, or float}.  Read and return a formated number:  - Skip leading non numerical characters  - skip formating characters such as commas."  (let ((Number 0)        (Period nil))    (skip-html-tags Stream)    ;; skip leading non numerical chars    (loop      (let ((Char (read-char Stream)))        (when (digit-char-p Char)          (setq Number (- (char-code Char) 48))          (return))))    ;; read number    (loop      (let ((Char (read-char Stream)))        (cond         ((digit-char-p Char)          (cond           (Period            (incf Number (* Period (- (char-code Char) 48)))            (setq Period (/ Period 10)))           (t            (setq Number (+ (* Number 10) (- (char-code Char) 48))))))         ((equal Char #\,) )            ;; skip commas         ((equal Char #\.) (setq Period 0.1))         (t (return Number)))))));********************************************;*  File URLs                               *;********************************************(defun SUBSTITUTE-URL-CHARS (URL) "  in:  URL {string}.  out: Compliant-URL {string}.  Replace URL specific characters such as %20 with their equivalents."  (with-output-to-string (Output)    (with-input-from-string (Input URL)      (loop        (let ((Char (or (read-char Input nil nil))))          (unless Char (return))          (case Char            (#\/ (princ #\: Output))            (#\% (progn (setq Char (read-char Input nil nil))                        (unless Char (return))                        (case Char                          (#\2 (progn (setq Char (read-char Input nil nil))                                      (unless Char (return))                                      (case Char                                        (#\0 (princ #\space Output))                                        (t (standard-alert "Ill-Formatted URL" :alert-type :stop)                                           (return)))))                                                                (#\3 (progn (setq Char (read-char Input nil nil))                                      (unless Char (return))                                      (case Char                                        (#\F (princ #\? Output))                                        (t (standard-alert "Ill-Formatted URL" :alert-type :stop)                                           (return)))))                          (t (standard-alert "Ill-Formatted URL" :alert-type :stop)                             (return)))))            (t (princ Char Output))))))))(defun URL-ENCODE (String)   "Encodes the given string into a string that contains only valid URL characters.   Any URL unsafe characters are replaced by its corresponding URL escape codes.   See the following documentation:   - http://www.rfc-editor.org/rfc/rfc1738.txt   - http://webclass.csuchico.edu/courses/begweb/notes/url-encoding.html"  (with-output-to-string (Output)    (with-input-from-string (Input String)      (loop        (let ((Char (read-char Input nil nil)))          (unless Char (return))          (case Char            ((#\Space #\< #\> #\" #\# #\% #\{ #\} #\| #\\ #\^ #\~ #\[ #\] #\` #\; #\/ #\? #\: #\@ #\= #\&)             (format Output "%~X" (char-code Char)))            (t (princ Char Output))))))))(defun PATHNAME->FILE-URL (Pathname)  "in:  Pathname {pathname}.  out: URL {string}.  Convert a pathname pointing to a local file into a file URL."  (with-output-to-string (Output)    (princ "file:///Volumes/" Output)    ;; ignore the first component which is the directory type (:ABSOLUTE or :RELATIVE)    (dolist (Dirname (rest (pathname-directory Pathname)))      (format Output "~A/" (url-encode Dirname)))    (princ (url-encode (mac-file-namestring Pathname)) Output)))#| Examples:;; price of Mac Mini in Apple store(find-string-in-web-page   "http://store.apple.com/us"  "Mac mini*from*$");; price of Mac Book Pro 15-inch: 2.4 GHz(find-string-in-web-page   "http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro"  "15-inch: 2.4 GHz*$");; Price of Audi R8(find-string-in-web-page   "http://configurator.audiusa.com/acc/aoa-aoa-aoa-eng.view;jsessionid=AvIYbnB-HQoZ8AZUFWSzUkjKMwtl14opqoCA2LnU?msk=1&csref=75483530250853401#engine"  "Price as Built*$")(dotimes (i 10)  (print (find-string-in-web-page   "http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro"  "15-inch: 2.4 GHz*$")))(open-url "http://www.iconfactory.com/")(open-url "http://www.cs.colorado.edu/~ralex/") (time (find-web-page-string-in-page        "http://www.cs.colorado.edu/homes/ralex/public_html/Home.html"       "A"))Crashes MCL > 4.2 (4.3, 4.3.1):(without-interrupts   (find-web-page-string-in-page    "http://www.atd.ucar.edu/cgi-bin/mlabweatherE"    "Temperature"    #'read-formated-number))|#  