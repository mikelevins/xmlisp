;;;-*- Mode: Lisp; Package: LUI -*-;*********************************************************************;*                                                                   *;*    PROGRAM    E X T R A C T   F R O M   W E B   P A G E           *;*                                                                   *;*********************************************************************   ;* Author    : Alexander Repenning (alexnder@agentsheets.com)     *   ;*             http://www.agentsheets.com                         *   ;* Copyright : (c) 2012 AgentSheets Inc.                          *   ;* Filename  : extract-from-web-page.lisp                         *   ;* Based on  : WWW-commands.lisp (AgentSheets 1.6)                *   ;* Updated   : 02/11/12                                           *   ;* Version   :                                                    *   ;*   1.0   02/11/12                                               *   ;* HW/SW     : MacBook Pro, OS X 10.6.8, CCL 1.7                  *   ;* Abstract  : Extract information from web pages                 *   ;*                                                                *   ;******************************************************************(in-package :lui);********************************************;*  TCP/IP Reader and Parser                *;********************************************(defun FIND-MATCH-STRING (Stream String Length) "  in:  Stream {stream}, String {string}, length int;  out: Find {boolean}.  Find <String> in <Stream>.   String may contain ''*'' wildcards to skip tags etc."  (let ((Index 0)         (Sub-Index 0)        (Char nil))    (setq String (string-upcase String))    (dotimes (i Length)      (cond       ;; Wildcard       ((char= (char String Index) #\*)        (incf Index)        (setq Sub-Index Index)        (when (= Index (length String)) (return t)))       ;; else Read and match       (t        (setq Char (read-char Stream nil nil))        (unless Char (return-from FIND-MATCH-STRING nil))        (setq Char (char-upcase Char))        (cond         ;; Character Match         ((char= (char String Index) Char)          (incf Index)          (when (= Index (length String))            ;; done!            (return t)))         ;; Missmatch         (t (setq Index Sub-Index))))))))(defun SKIP-HTML-TAGS (Stream) "  in: Stream {stream}.  Skip all ''<??>'' HTML tags in stream."  (let ((State :outside))    (loop      (let ((Char (read-char Stream nil nil)))        (unless Char (return))        (case State          (:outside            (case Char             (#\< (setq State :inside))             ((#\space #\newline #\linefeed #\>) ) ;; ignore             (t (return (unread-char Char Stream)))))          (:inside           (case Char             (#\> (setq State :outside))             (t ))))))))                        (defun READ-FORMATED-NUMBER (Stream) "  in:  Stream {stream}.  out: Number {fixnum, or float}.  Read and return a formated number:  - Skip leading non numerical characters  - skip formating characters such as commas."  (let ((Number 0)        (Period nil)        (Sign 1))    (skip-html-tags Stream)    ;; skip leading non numerical chars    (let ((Previous-Char nil))      (loop        (let ((Char (read-char Stream)))          (when (digit-char-p Char)            (setq Number (- (char-code Char) 48))            (when (equal Previous-Char #\-) (setq Sign -1))            (return))          (setf Previous-Char Char))))    ;; read number    (loop      (let ((Char (read-char Stream)))        (cond         ((digit-char-p Char)          (cond           (Period            (incf Number (* Period (- (char-code Char) 48)))            (setq Period (/ Period 10)))           (t            (setq Number (+ (* Number 10) (- (char-code Char) 48))))))         ((equal Char #\,) )            ;; skip commas         ((equal Char #\.) (setq Period 0.1))         (t (return (* Sign Number))))))));********************************************;*  Main                                    *;********************************************(defun FIND-STRING-IN-WEB-PAGE (URL String) "  in: URL {string}, String {string}  out: Number int or float;  Search web page  <URL> for <String>.  If string is not present return nil.    otherwise, if there is a <Reader> call it and return its value.               if there is no <Reader> return t.  <String> can contain ''*'' wildcards."  (ccl::http-get    Url   :reader-function   #'(lambda (Stream Code Length)       (case Code         ;; OK         (200          (find-match-string Stream String Length))         ;; NOT OK         (t          (error "HTTP error ~A (~A)" Code (ccl::http-status-code-explanation Code)))))))(defun FIND-STRING-IN-WEB-PAGE-AND-READ-NUMBER (URL String) "  in: URL {string}, String {string}  out: Number int or float;  Search web page  <URL> for <String>.  If string is not present return nil.    otherwise, if there is a <Reader> call it and return its value.               if there is no <Reader> return t.  <String> can contain ''*'' wildcards."  (ccl::http-get    Url   :reader-function   #'(lambda (Stream Code Length)       (case Code         ;; OK         (200          (when (find-match-string Stream String Length)            (read-formated-number Stream)))         ;; NOT OK         (t          (error "HTTP error ~A (~A)" Code (ccl::http-status-code-explanation Code)))))))#| Examples:;; price of Mac Mini in Apple store(find-string-in-web-page-and-read-number  "http://store.apple.com/us"  "Mac mini*from*$");; price of Mac Book Pro 15-inch: 2.4 GHz(find-string-in-web-page-and-read-number  "http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro"  "15-inch: 2.4 GHz*$");; Price of Audi R8 From(find-string-in-web-page-and-read-number  "http://usnews.rankingsandreviews.com/cars-trucks/Audi_R8/"  "MSRP:*$");; To (find-string-in-web-page-and-read-number  "http://usnews.rankingsandreviews.com/cars-trucks/Audi_R8/"  "MSRP:*$*-*$");; Current metric Temperature in Boulder Colorado(find-string-in-web-page-and-read-number  "http://www.eol.ucar.edu/cgi-bin/weather.cgi?site=ml&period=5-minute&units=metric&&fields=tdry&fields=rh&fields=cpres0&fields=wspd&fields=wdir&fields=raina"  "<th>Temperature")(speak   (format nil "Is is ~A degrees centigrade in Boulder right now" (find-string-in-web-page-and-read-number  "http://www.eol.ucar.edu/cgi-bin/weather.cgi?site=ml&period=5-minute&units=metric&&fields=tdry&fields=rh&fields=cpres0&fields=wspd&fields=wdir&fields=raina"  "<th>Temperature"))  "Victoria");; Bad request(find-string-in-web-page-and-read-number  "http://configurator.audiusa.com/nosuchpage"  "Price as Built*$");; how fast? (dotimes (i 10)  (print     (time        (find-string-in-web-page-and-read-number  "http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro"  "15-inch: 2.4 GHz*$"))))|#  